<?php

/**
 * @file
 * Implements fields and functionalities for the Enacast podcast service.
 */

/**
 * Implements hook_init().
 */
function enacast_init() {
  backdrop_add_js(backdrop_get_path('module', 'enacast') . '/js/enacast.js');
}

/**
 * Implements hook_config_info().
 */
function enacast_config_info() {
  return array(
    'enacast.settings' => array(
      'label' => t('Enacast settings'),
      'group' => t('Configuration'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function enacast_menu() {
  $items = array();

  $items['admin/config/services/enacast'] = array(
    'title' => 'Enacast',
    'description' => 'Settings for Enacast services.',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('enacast_settings_form'),
    'access arguments' => array('administer enacast'),
    'file' => 'enacast.admin.inc',
    'weight' => -15,
  );

  $items['admin/config/services/enacast/settings'] = array(
    'title' => 'Settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  $items['admin/config/services/enacast/update'] = array(
    'title' => 'Update',
    'description' => 'Update content from Enacast services.',
    'page callback' => 'enacast_update_content_page',
    'access arguments' => array('administer enacast'),
    'file' => 'enacast.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function enacast_permission() {
  return array(
    'administer enacast' => array(
      'title' => t('Administer Enacast'),
    ),
  );
}

/**
 * Implements hook_field_info().
 */
function enacast_field_info() {
  return array(
    'enacast_program' => array(
      'label' => t('Enacast program'),
      'description' => t('Machine name of the Enacast program.'),
      'instance_settings' => array(
        'text_processing' => 0,
        'allowed_formats' => array(),
      ),
      'default_widget' => 'text_textfield',
      'default_formatter' => 'enacast_text',
    ),
    'enacast_radio' => array(
      'label' => t('Enacast radio station'),
      'description' => t('Machine name of the Enacast radio station.'),
      'instance_settings' => array(
        'text_processing' => 0,
        'allowed_formats' => array(),
      ),
      'default_widget' => 'text_textfield',
      'default_formatter' => 'enacast_text',
    ),
    'enacast_podcast' => array(
      'label' => t('Enacast podcast PK ID'),
      'description' => t('PK ID of the Enacast podcast.'),
      'instance_settings' => array(
        'min' => '-2147483647',
        'max' => '2147483647',
        'prefix' => '',
        'suffix' => '',
      ),
      'default_widget' => 'number',
      'default_formatter' => 'number_integer',
    ),
  );
}

/**
 * Implements hook_field_validate().
 */
function enacast_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
  foreach ($items as $delta => $item) {
    if (!empty($item['enacast_program'])) {
      if (preg_match('/\s/', $item['enacast_program'])) {
        $errors[$field['field_name']][$langcode][$delta][] = array(
          'error' => 'enacast_invalid',
          'message' => t('Program name must not contain white spaces.'),
        );
      }
    }
  }
}

/**
 * Implements hook_field_is_empty().
 */
function enacast_field_is_empty($item, $field) {
  return empty($item['value']);
}

/**
 * Implements hook_field_formatter_info_alter().
 */
function enacast_field_formatter_info_alter(&$info) {
  $info['text_plain']['field types'][] = 'enacast_program';
  $info['text_plain']['field types'][] = 'enacast_radio';
  $info['number_integer']['field types'][] = 'enacast_podcast';
}

/**
 * Implements hook_field_formatter_info().
 */
function enacast_field_formatter_info() {
  return array(
    'enacast_last_podcast_player' => array(
      'label' => t('Last podcast player'),
      'field types' => array('enacast_program'),
    ),
    'enacast_podcast_player' => array(
      'label' => t('Podcast player'),
      'field types' => array('enacast_podcast'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function enacast_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $config = config('enacast.settings');
  $element = array();

  if ($config->get('radio') == '') {
    backdrop_set_message(
      t('You need to configure the Enacast module to show any player: !link.', array(
        '!link' => l('Enacast settings', 'admin/config/services/enacast'),
      )),
      'error'
    );
    return $element;
  }

  foreach ($items as $delta => $item) {
    switch ($display['type']) {
      case 'enacast_text':
        $element[$delta] = array('#markup' => strip_tags($item['value']));
        break;

      case 'enacast_last_podcast_player':
        $program = $item['value'];
        $radio = $config->get('radio');
        $url = "https://enacast.com/api/v3/podcast/?format=json&page=1&page_size=1&program={$program}&radio={$radio}";
        $data = enacast_get_json($url);

        if (!empty($data['results'][0])) {
          $podcast = $data['results'][0];
          $variables = array(
            'mp3_url' => $podcast['audio'],
            'title' => $podcast['name'],
            'summary' => $podcast['summary'],
          );
          $element[$delta] = array('#markup' => theme('enacast_last_podcast', $variables));
        }
        break;

      case 'enacast_podcast_player':
        $podcast_id = $item['value'];
        $radio = $config->get('radio');
        $mp3_url = "https://enacast.com/{$radio}/play_podcast/{$podcast_id}.mp3";
        $variables = array('mp3_url' => $mp3_url);
        $element[$delta] = array('#markup' => theme('enacast_podcast', $variables));
        break;
    }
  }

  return $element;
}

/**
 * Implements hook_field_widget_info_alter().
 */
function enacast_field_widget_info_alter(&$info) {
  $info['text_textfield']['field types'][] = 'enacast_program';
  $info['text_textfield']['field types'][] = 'enacast_radio';
  $info['number']['field types'][] = 'enacast_podcast';
}

/**
 * Implements hook_theme().
 */
function enacast_theme() {
  return array(
    'enacast_last_podcast' => array(
      'variables' => array(
        'mp3_url' => NULL,
        'title' => NULL,
        'summary' => NULL,
      ),
      'template' => 'templates/enacast-last-podcast',
    ),
    'enacast_podcast' => array(
      'variables' => array(
        'mp3_url' => NULL,
      ),
      'template' => 'templates/enacast-podcast',
    ),
    'enacast_now_playing_block' => array(
      'variables' => array(
        'radio' => NULL,
      ),
      'template' => 'templates/enacast-now-playing-block',
    ),
    'enacast_markers' => array(
      'variables' => array(
        'markers' => NULL,
        'nid' => NULL,
      ),
      'template' => 'templates/enacast-markers',
    ),
  );
}

/**
 * Implements hook_block_info().
 */
function enacast_block_info() {
  return array(
    'enacast_now_playing' => array(
      'info' => t('Enacast Now Playing Block'),
      'description' => t('Displays the currently playing content from Enacast.'),
    ),
  );
}

/**
 * Implements hook_block_configure().
 */
function enacast_block_configure($delta = '', $settings = array()) {
  $form = array();

  if ($delta == 'enacast_now_playing') {
    $settings += array('radio' => '');
    $form['radio'] = array(
      '#type' => 'textfield',
      '#title' => t('Radio'),
      '#size' => 60,
      '#description' => t('Radio station to show the now playing block from.'),
      '#default_value' => $settings['radio'],
    );
  }

  return $form;
}

/**
 * Implements hook_block_view().
 */
function enacast_block_view($delta = '', $settings = array(), $contexts = array()) {
  $block = array();

  if ($delta == 'enacast_now_playing') {
    $block['subject'] = t('Now Playing');
    $block['content'] = array(
      '#theme' => 'enacast_now_playing_block',
      '#radio' => $settings['radio'],
    );
  }

  return $block;
}

/**
 * Preprocess function for theme_enacast_now_playing_block().
 *
 * @param array $variables
 *   An array of variables to pass to the theme function.
 */
function enacast_preprocess_enacast_now_playing_block(&$variables) {
  $variables['source'] = 'https://relay.stream.enacast-cloud.com:30230/' . $variables['radio'] . 'HD.mp3';
}

/**
 * Fetches JSON data from a URL.
 *
 * @param string $url
 *   The URL to fetch data from.
 *
 * @return mixed
 *   The decoded JSON data or FALSE on failure.
 */
function enacast_get_json($url) {
  $options = array(
    'method' => 'GET',
    'timeout' => 30,
    'headers' => array(
      'Accept' => 'application/json',
    ),
  );

  $response = backdrop_http_request($url, $options);

  if ($response->code == 200) {
    return json_decode($response->data, TRUE);
  }

  return FALSE;
}

/**
 * Implements hook_node_load().
 */
function enacast_node_load($nodes, $types) {
  $config = config('enacast.settings');
  $podcast_type = $config->get('podcast_type');

  if (in_array($podcast_type, $types)) {
    $podcast_field = $config->get('podcast_field');

    foreach ($nodes as $node) {
      if (!empty($node->{$podcast_field}['und'][0]['value'])) {
        $pkid = $node->{$podcast_field}['und'][0]['value'];
        $node->enacast_markers = enacast_get_markers($pkid);
      }
    }
  }
}

/**
 * Retrieves markers for a given PK ID.
 *
 * @param int $pkid
 *   The PK ID of the podcast.
 *
 * @return array
 *   An array of marker objects.
 */
function enacast_get_markers($pkid) {
  $query = db_select('enacast_markers', 'm')
    ->fields('m', array('descr', 'startsecond'))
    ->condition('m.pkid', $pkid)
    ->orderBy('m.startsecond', 'ASC');

  return $query->execute()->fetchAll();
}

/**
 * Implements hook_node_view().
 */
function enacast_node_view($node, $view_mode, $langcode) {
  $config = config('enacast.settings');

  if ($node->type == $config->get('podcast_type')) {
    $node->content['enacast_markers'] = array(
      '#theme' => 'enacast_markers',
      '#markers' => $node->enacast_markers,
      '#nid' => $node->nid,
      '#weight' => 10,
    );
  }
}

/**
 * Preprocess function for theme_enacast_markers().
 *
 * @param array $variables
 *   An array of variables to pass to the theme function.
 */
function enacast_preprocess_enacast_markers(&$variables) {
  $query_params = backdrop_get_query_parameters();

  if (isset($query_params['s'])) {
    backdrop_add_js(array('audioPlayer' => array('startTime' => $query_params['s'])), 'setting');
  }

  $variables['share_icon'] = backdrop_get_path('module', 'enacast') . '/images/share-2.svg';
  $variables['path'] = url('node/' . $variables['nid']);
}
